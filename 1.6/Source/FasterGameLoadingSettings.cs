using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using Verse;

namespace FasterGameLoading
{
    public class FasterGameLoadingSettings : ModSettings
    {
        public static Dictionary<string, string> loadedTexturesSinceLastSession = new Dictionary<string, string>();
        public static Dictionary<string, ModContentPack> modsByPackageIds = new Dictionary<string, ModContentPack>();
        public static Dictionary<string, string> loadedTypesByFullNameSinceLastSession = new Dictionary<string, string>();
        public static List<string> loadedTypesSinceLastSession = new List<string>();
        public static System.Collections.Concurrent.ConcurrentDictionary<string, byte> typesLoadedThisSession = new System.Collections.Concurrent.ConcurrentDictionary<string, byte>();
        public static List<string> modsInLastSession = new List<string>();
        public static HashSet<string> successfulXMLPathesSinceLastSession = new HashSet<string>();
        public static HashSet<string> failedXMLPathesSinceLastSession = new HashSet<string>();
        public static bool delayGraphicLoading = true;
        public static bool earlyModContentLoading = true;
        public static bool disableStaticAtlasesBaking;
        public static bool xmlCaching = true;
        public static bool xmlInheritanceCaching = true;
        public static bool experimentalOptimizations = true;
        public static bool debugMode;
        public Dictionary<string, string> xmlHashes = new Dictionary<string, string>();
        public static ModContentPack GetModContent(string packageId)
        {
            var packageLower = packageId.ToLower();
            if (!modsByPackageIds.TryGetValue(packageLower, out var mod))
            {
                modsByPackageIds[packageLower] = mod = LoadedModManager.RunningModsListForReading.FirstOrDefault(x =>
                    x.PackageIdPlayerFacing.ToLower() == packageLower);
            }
            return mod;
        }

        public static void DoSettingsWindowContents(Rect inRect)
        {
            var ls = new Listing_Standard();
            ls.Begin(new Rect(inRect.x, inRect.y, inRect.width, 500));
            ls.CheckboxLabeled("Load mod content early during game idling periods. When enabled, the game might become not responsive during loading, but it's expected. Disable this if you will encounter any issues.", ref earlyModContentLoading);
            ls.CheckboxLabeled("Prevent graphic and icon loading during startup and load them gradually during playing. Will cut some time off during loading, however it might be not stable and error prone. Disable this if you will encounter any issues.", ref delayGraphicLoading);
            ls.CheckboxLabeled("Disable static atlases backing. Will cut some time off during loading, but might make map rendering perform a bit slower.", ref disableStaticAtlasesBaking);
            ls.CheckboxLabeled("Enable XML caching. This will speed up game loading after the first launch, but may cause issues with mods that dynamically change XML files. Disable if you encounter any issues.", ref xmlCaching);
            ls.CheckboxLabeled("Enable XML inheritance caching. This is a part of XML caching, disable it if you have any issues with inheritance.", ref xmlInheritanceCaching);
            //ls.CheckboxLabeled("Enable experimental optimizations. May break things, use with caution.", ref experimentalOptimizations);
            ls.CheckboxLabeled("Enable debug mode. This is a modder tool, does nothing for end users.", ref debugMode);
            ls.GapLine();
            var explanation = "Some mods may contain a lot of high-res textures that take a long time to load. Use this to downscale hi-res textures. " +
                "Additionally, dds files generated by RimPy will be deleted alongside, so you can perform texture compression by this tool again. " +
                "Following textures will be reduced down to target size: " +
                "\nBuilding - 256px" +
                "\nPawn - 256px" +
                "\nApparel - 128px " +
                "\nWeapon - 128px" +
                "\nItem - 128px" +
                "\nPlant - 128px" +
                "\nTree - 256px" +
                "\nTerrain - 1024px";
            if (ls.ButtonTextLabeled(explanation, "Downscale textures"))
            {
                Find.WindowStack.Add(new Dialog_MessageBox("Perform texture downscaling? It can be reverted by redownloading mods.", "Confirm".Translate(), delegate
                {
                    TextureResize.DoTextureResizing();
                }, "GoBack".Translate()));
            }
            ls.End();
        }
        public override void ExposeData()
        {
            base.ExposeData();
            if (Scribe.mode == LoadSaveMode.Saving)
            {
                loadedTypesSinceLastSession = typesLoadedThisSession.Keys.ToList();
            }
            Scribe_Collections.Look(ref loadedTexturesSinceLastSession, "loadedTexturesSinceLastSession", LookMode.Value, LookMode.Value);
            Scribe_Collections.Look(ref loadedTypesByFullNameSinceLastSession, "loadedTypesByFullNameSinceLastSession", LookMode.Value, LookMode.Value);
            Scribe_Collections.Look(ref loadedTypesSinceLastSession, "loadedTypesSinceLastSession", LookMode.Value);
            Scribe_Collections.Look(ref successfulXMLPathesSinceLastSession, "successfulXMLPathesSinceLastSession", LookMode.Value);
            Scribe_Collections.Look(ref failedXMLPathesSinceLastSession, "failedXMLPathesSinceLastSession", LookMode.Value);
            Scribe_Collections.Look(ref modsInLastSession, "modsInLastSession", LookMode.Value);
            Scribe_Values.Look(ref disableStaticAtlasesBaking, "disableStaticAtlasesBaking");
            Scribe_Values.Look(ref delayGraphicLoading, "delayGraphicLoading", true);
            Scribe_Values.Look(ref earlyModContentLoading, "earlyModContentLoading", true);
            Scribe_Values.Look(ref xmlCaching, "xmlCaching", true);
            Scribe_Values.Look(ref xmlInheritanceCaching, "xmlInheritanceCaching", true);
            Scribe_Values.Look(ref experimentalOptimizations, "experimentalOptimizations", true);
            Scribe_Values.Look(ref debugMode, "debugMode");
            Scribe_Collections.Look(ref xmlHashes, "xmlHashes", LookMode.Value, LookMode.Value);
            if (Scribe.mode == LoadSaveMode.PostLoadInit)
            {
                typesLoadedThisSession = new System.Collections.Concurrent.ConcurrentDictionary<string, byte>();
                loadedTexturesSinceLastSession ??= new Dictionary<string, string>();
                loadedTypesByFullNameSinceLastSession ??= new Dictionary<string, string>();
                loadedTypesSinceLastSession ??= new List<string>();
                modsByPackageIds ??= new Dictionary<string, ModContentPack>();
                failedXMLPathesSinceLastSession ??= new HashSet<string>();
                successfulXMLPathesSinceLastSession ??= new HashSet<string>();
                modsInLastSession ??= new List<string>();
                if (!modsInLastSession.SequenceEqual(ModsConfig.ActiveModsInLoadOrder.Select(x => x.packageIdLowerCase)))
                {
                    loadedTexturesSinceLastSession.Clear();
                    loadedTypesByFullNameSinceLastSession.Clear();
                    loadedTypesSinceLastSession.Clear();
                    failedXMLPathesSinceLastSession.Clear();
                    successfulXMLPathesSinceLastSession.Clear();
                    xmlHashes.Clear();
                    Utils.Log("Mods changed, clearing cache");
                }
            }
        }
    }
}

